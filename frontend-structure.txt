
# SPA MANAGEMENT SYSTEM - FRONTEND IMPLEMENTATION GUIDE

## Project Overview
This is a React-based front-end for a spa management system built with:
- React 18
- TypeScript
- React Router for navigation
- React Query for data fetching
- Tailwind CSS for styling
- Shadcn UI components
- Zod for form validation

## Directory Structure

```
src/
├── components/       # Reusable components
│   ├── auth/         # Authentication related components
│   ├── booking/      # Booking related components
│   ├── dashboard/    # Dashboard components
│   ├── home/         # Home page components
│   ├── layout/       # Layout components (Navbar, Footer)
│   └── ui/           # UI components (from shadcn/ui)
├── hooks/            # Custom hooks
├── layouts/          # Page layouts (e.g. DashboardLayout)
├── lib/              # Utility functions and helpers
├── pages/            # Page components
│   ├── admin/        # Admin pages
│   └── user/         # User pages
├── types/            # TypeScript type definitions
├── App.tsx           # Main application component
└── main.tsx          # Entry point
```

## Implementation Steps

### 1. Project Setup
1. Create a Vite project with React and TypeScript
   ```bash
   npm create vite@latest spa-management -- --template react-ts
   cd spa-management
   ```

2. Install core dependencies
   ```bash
   npm i react-router-dom @tanstack/react-query zod @hookform/resolvers date-fns recharts
   ```

3. Setup Tailwind CSS
   ```bash
   npm i -D tailwindcss postcss autoprefixer
   npx tailwindcss init -p
   ```

4. Install Shadcn UI components
   ```bash
   npx shadcn-ui@latest init
   ```
   - Choose "tailwind.css" for CSS implementation
   - Choose "@/components/ui" for component location
   - Choose "CSS Variables" for the color mode
   - Choose "Global imports" for import style

### 2. UI Component System

1. Install required Shadcn UI components
   ```bash
   npx shadcn-ui@latest add button card form input select table tabs dialog avatar dropdown-menu toast
   ```

2. Create the color palette in `index.css`:
   ```css
   :root {
     --background: 0 0% 100%;
     --foreground: 222.2 84% 4.9%;
     --card: 0 0% 100%;
     --card-foreground: 222.2 84% 4.9%;
     --popover: 0 0% 100%;
     --popover-foreground: 222.2 84% 4.9%;
     --primary: 330 80% 60%;
     --primary-foreground: 210 40% 98%;
     --secondary: 210 40% 96.1%;
     --secondary-foreground: 222.2 47.4% 11.2%;
     --muted: 210 40% 96.1%;
     --muted-foreground: 215.4 16.3% 46.9%;
     --accent: 210 40% 96.1%;
     --accent-foreground: 222.2 47.4% 11.2%;
     --destructive: 0 84.2% 60.2%;
     --destructive-foreground: 210 40% 98%;
     --border: 214.3 31.8% 91.4%;
     --input: 214.3 31.8% 91.4%;
     --ring: 330 80% 60%;
     --radius: 0.5rem;
   }
   ```

### 3. Color Theme

Our spa management system uses a feminine theme with pink/purple as the primary color:

1. Primary Color: Pink (hsl: 330 80% 60%) - Used for buttons, accents, and highlights
2. Secondary: Light gray with a hint of blue (hsl: 210 40% 96.1%)
3. Text: Dark gray with high contrast (hsl: 222.2 84% 4.9%)
4. Background: Pure white (hsl: 0 0% 100%)
5. Border: Light gray (hsl: 214.3 31.8% 91.4%)

Sidebar Theme:
- Background: Light gray (hsl: 0 0% 98%)
- Foreground: Dark blue-gray (hsl: 240 5.3% 26.1%)

### 4. Navigation Implementation

1. Create a Router with React Router Dom in `App.tsx`
   - Public routes: Home, Services, Specialists, Blog, Booking, Login/Register
   - Protected user routes: Dashboard, Bookings, History, Payments, Settings
   - Protected admin routes: Admin Dashboard, Users, Staff, Services, etc.

2. Implement the `DashboardLayout` component with sidebar navigation
   - Sidebar for navigation with collapsible menu on mobile
   - Main content area with header and content

### 5. Authentication Flow

1. Create registration screen with form validation
2. Create login screen with error handling
3. Implement protected routes using React Router
4. Store authentication token in localStorage
5. Create user context to manage authentication state

### 6. Booking System Implementation

1. Multi-step booking process:
   - Service selection - allow users to choose one or more services
   - Specialist selection - show available specialists
   - Date and time selection - calendar interface
   - User information - collect customer details
   - Booking confirmation and payment

2. Create booking summary and confirmation components

### 7. Dashboard Implementation

1. User Dashboard:
   - Overview with upcoming appointments
   - Booking management
   - Booking history
   - Payment information

2. Admin Dashboard:
   - Statistics and overview charts
   - User and staff management
   - Service management
   - Booking management
   - Reports and analytics

### 8. Responsive Design

1. Implement responsive designs using Tailwind CSS's responsive modifiers:
   - Mobile-first approach
   - Breakpoints: sm (640px), md (768px), lg (1024px), xl (1280px)
   - Collapsible sidebar for smaller screens
   - Stack columns for mobile views

2. Create mobile-specific components when needed
   - Mobile-specific navigation
   - Simplified layouts for small screens

### 9. API Integration

1. Create API services for each domain:
   - Auth service (login, register, logout)
   - User service (profile, update)
   - Booking service (create, read, update, delete)
   - Services API (list, details)
   - Specialists API (list, details, availability)

2. Use React Query for data fetching and caching:
   - Implement query hooks
   - Handle loading and error states
   - Implement mutations for data updates

### 10. Performance Optimization

1. Implement lazy loading for routes
2. Add proper loading states and skeleton loaders
3. Optimize images and assets
4. Implement proper caching strategies with React Query

## Key Features

1. **User Authentication**
   - Login/Register pages
   - Role-based access control (User/Staff/Admin)

2. **Public Pages**
   - Homepage with services, specialists, testimonials
   - Services listing
   - Specialists listing
   - Blog/articles
   - Skin quiz

3. **Booking System**
   - Multi-step booking process
   - Service selection
   - Specialist selection
   - Date/time selection
   - Customer information

4. **User Dashboard**
   - Overview
   - Booking management
   - Booking history
   - Payment information
   - Profile settings

5. **Admin Dashboard**
   - Overview with statistics
   - User management
   - Staff management
   - Service management
   - Booking management
   - Transaction history
   - Reports generation
   - System settings

## Navigation Structure

- Public: Home, Services, Specialists, Blog, Booking, Login/Register
- User Dashboard: Overview, Bookings, History, Payments, Settings
- Admin Dashboard: Overview, Users, Staff, Services, Bookings, Transactions, Reports, Settings

## Responsive Design
- The application is fully responsive, supporting mobile, tablet, and desktop views
- Mobile menu for small screens
- Responsive dashboard layout with collapsible sidebar
